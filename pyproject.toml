# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
[build-system]
requires = ["setuptools >= 61.0", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "databytes"
version = "1.2"
authors = [
    {name = 'Stephane "Twidi" Angel', email = "s.angel@twidi.com"}
]
description = "A class based binary structure to serialize/deserialize binary data (using python struct under the hood)."
readme = "README.md"
license = {file = "LICENSE"}
keywords = ["binary", "struct", "data-structures", "shared-memory", "buffer", "serialization", "deserialization", "memory-mapping", "bytes"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10"
dependencies = [
    "typing-extensions",
    "numpy",
]

[project.urls]
"source" = "https://github.com/twidi/databytes"
"author" = "https://twidi.com"

[tool.setuptools]
zip-safe = true
platforms = ["Linux"]
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
exclude = [
    "tests",
    "*.tests",
    "*.tests.*",
]

[project.optional-dependencies]
extra = [
    "rich",
]

dev = [
    "build",
    "ruff>=0.1.2",
    "mypy",
    "pytest",
    "pytest-cov",
    "pytest-env",
    "pytest-sugar",
    "twine",
    "uv",
]


[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    # flake8 error class
    "F",
    # mccabe plugin
    "C",
    # pycodestyle plugin
    "E",
    "W",
    # bugbear plugin
    "B",
    "B9",
]
ignore = [
    # Allow shadowing
    "A001",
    "A002",
    "A003",
    # Allow docstrings in functions decorated with @overload
    "D418",
    # Line too long: we let black manage it
    "E501",
    # Allow assigning lambda expressions
    "E731",
    # Allow whitespace before ':', make slicing more readable
    "E203",
    # Allow complexity...
    "C901",
    # Flake8 gives meaningless `First line should not be the function's "signature"`
    "D402",
    # Ignore missing docstrings
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    # Other docstring stuff
    "D203",
    "D213",
    # Allow ellipsis at end of function definition (for overloads)
    "E701",
]

[tool.ruff.lint.per-file-ignores]
# ignore unused and global import in __init__.py files
"*/__init__.py" = ["F401", "F403"]
# ignore missing docstrings and global imports in tests
"test_*" = ["D", "F403", "E501"]
"*/tests/*" = ["D", "F403", "E501"]
"*/tests/*/__init__.py" = ["D", "F401", "F403", "E501"]
"*/conftest.py" = ["D", "F401", "F403"]


[tool.pytest.ini_options]
addopts = ["--cov=src/databytes", "--cov-report", "term-missing:skip-covered", "--ignore", "setup.py", "--ignore", "docs", "--ignore", "ci", "--pyargs"]

[tool.pytest_env]
DATABYTES_ENDIANNESS = "LITTLE"

[tool.coverage.run]
branch = true
omit = ["*/tests/*", "*/conftest.py"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "pragma: not covered", "raise NotImplementedError", "if TYPE_CHECKING:", "@overload"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_return_any = true
warn_unreachable = true
local_partial_types = true
strict_equality = true
show_error_context = true
show_column_numbers = true
show_error_codes = true
pretty = true
strict = true
implicit_reexport = true
disallow_subclassing_any = false
plugins = ["src/mypy_plugin.py"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
